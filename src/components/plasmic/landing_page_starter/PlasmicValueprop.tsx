// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bwcSSYqcBXtyPeXvFEu2Rh
// Component: E6wHDTjYujWRMk
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_landing_page_starter.module.css"; // plasmic-import: bwcSSYqcBXtyPeXvFEu2Rh/projectcss
import * as sty from "./PlasmicValueprop.module.css"; // plasmic-import: E6wHDTjYujWRMk/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: NQC9CEyZtelPIk/icon

export type PlasmicValueprop__VariantMembers = {
  dark: "dark";
  flat: "flat";
  vertical: "vertical";
  color: "lightQuarternary";
  card: "card";
  flatIcon: "flatIcon";
  justDescription: "justDescription";
};

export type PlasmicValueprop__VariantsArgs = {
  dark?: SingleBooleanChoiceArg<"dark">;
  flat?: SingleBooleanChoiceArg<"flat">;
  vertical?: SingleBooleanChoiceArg<"vertical">;
  color?: SingleChoiceArg<"lightQuarternary">;
  card?: SingleBooleanChoiceArg<"card">;
  flatIcon?: SingleBooleanChoiceArg<"flatIcon">;
  justDescription?: SingleBooleanChoiceArg<"justDescription">;
};

type VariantPropType = keyof PlasmicValueprop__VariantsArgs;
export const PlasmicValueprop__VariantProps = new Array<VariantPropType>(
  "dark",
  "flat",
  "vertical",
  "color",
  "card",
  "flatIcon",
  "justDescription"
);

export type PlasmicValueprop__ArgsType = {
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot22?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicValueprop__ArgsType;
export const PlasmicValueprop__ArgProps = new Array<ArgPropType>(
  "slot",
  "slot2",
  "slot22",
  "children"
);

export type PlasmicValueprop__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultValuepropProps {
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot22?: React.ReactNode;
  children?: React.ReactNode;
  dark?: SingleBooleanChoiceArg<"dark">;
  flat?: SingleBooleanChoiceArg<"flat">;
  vertical?: SingleBooleanChoiceArg<"vertical">;
  color?: SingleChoiceArg<"lightQuarternary">;
  card?: SingleBooleanChoiceArg<"card">;
  flatIcon?: SingleBooleanChoiceArg<"flatIcon">;
  justDescription?: SingleBooleanChoiceArg<"justDescription">;
  className?: string;
}

function PlasmicValueprop__RenderFunc(props: {
  variants: PlasmicValueprop__VariantsArgs;
  args: PlasmicValueprop__ArgsType;
  overrides: PlasmicValueprop__OverridesType;
  dataFetches?: PlasmicValueprop__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__card]: hasVariant(variants, "card", "card"),
        [sty.root__card_vertical]:
          hasVariant(variants, "card", "card") &&
          hasVariant(variants, "vertical", "vertical"),
        [sty.root__flatIcon]: hasVariant(variants, "flatIcon", "flatIcon"),
        [sty.root__flat]: hasVariant(variants, "flat", "flat"),
        [sty.root__justDescription]: hasVariant(
          variants,
          "justDescription",
          "justDescription"
        ),
        [sty.root__vertical]: hasVariant(variants, "vertical", "vertical")
      })}
    >
      <div
        className={classNames(defaultcss.all, sty.freeBox__tYupE, {
          [sty.freeBox__card__tYupEn8Eb]: hasVariant(variants, "card", "card"),
          [sty.freeBox__card_vertical__tYupEn8EbLflO]:
            hasVariant(variants, "card", "card") &&
            hasVariant(variants, "vertical", "vertical"),
          [sty.freeBox__color_lightQuarternary__tYupEnGTbR]: hasVariant(
            variants,
            "color",
            "lightQuarternary"
          ),
          [sty.freeBox__flatIcon__tYupEf54RL]: hasVariant(
            variants,
            "flatIcon",
            "flatIcon"
          ),
          [sty.freeBox__flat__tYupEYyHk9]: hasVariant(variants, "flat", "flat"),
          [sty.freeBox__vertical__tYupELflO]: hasVariant(
            variants,
            "vertical",
            "vertical"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__sB2A0)}
              role={"img"}
              src={
                "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/red-apple_1f34e.png" as const
              }
            />
          ),

          value: args.slot2
        })}
      </div>

      {false ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__cwNc, {
            [sty.freeBox__card__cwNcN8Eb]: hasVariant(variants, "card", "card"),
            [sty.freeBox__card_vertical__cwNcN8EbLflO]:
              hasVariant(variants, "card", "card") &&
              hasVariant(variants, "vertical", "vertical"),
            [sty.freeBox__color_lightQuarternary__cwNcnGTbR]: hasVariant(
              variants,
              "color",
              "lightQuarternary"
            ),
            [sty.freeBox__flatIcon__cwNcf54RL]: hasVariant(
              variants,
              "flatIcon",
              "flatIcon"
            ),
            [sty.freeBox__flat__cwNcYyHk9]: hasVariant(
              variants,
              "flat",
              "flat"
            ),
            [sty.freeBox__vertical__cwNcLflO]: hasVariant(
              variants,
              "vertical",
              "vertical"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Icon8Icon
                className={classNames(defaultcss.all, sty.svg__mMgG8)}
                role={"img"}
              />
            ),

            value: args.slot22
          })}
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__jykvA, {
          [sty.freeBox__flat__jykvAYyHk9]: hasVariant(variants, "flat", "flat"),
          [sty.freeBox__justDescription__jykvAjRw2T]: hasVariant(
            variants,
            "justDescription",
            "justDescription"
          )
        })}
      >
        {(
          hasVariant(variants, "justDescription", "justDescription")
            ? false
            : true
        )
          ? p.renderPlasmicSlot({
              defaultContents: "Label",
              value: args.children,
              className: classNames(sty.slotChildren, {
                [sty.slotChildren__dark]: hasVariant(variants, "dark", "dark"),
                [sty.slotChildren__justDescription]: hasVariant(
                  variants,
                  "justDescription",
                  "justDescription"
                )
              })
            })
          : null}
        {p.renderPlasmicSlot({
          defaultContents:
            "Porttitor feugiat a scelerisque nullam parturient vestibulum tempor a litora suscipit arcu potenti varius venenatis venenatis dapibus fames adipiscing in in taciti.",
          value: args.slot,
          className: classNames(sty.slotSlot, {
            [sty.slotSlot__card]: hasVariant(variants, "card", "card"),
            [sty.slotSlot__dark]: hasVariant(variants, "dark", "dark"),
            [sty.slotSlot__justDescription]: hasVariant(
              variants,
              "justDescription",
              "justDescription"
            )
          })
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicValueprop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicValueprop__VariantsArgs;
    args?: PlasmicValueprop__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicValueprop__Fetches;
  } & Omit<PlasmicValueprop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicValueprop__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicValueprop__ArgProps,
      internalVariantPropNames: PlasmicValueprop__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicValueprop__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValueprop";
  } else {
    func.displayName = `PlasmicValueprop.${nodeName}`;
  }
  return func;
}

export const PlasmicValueprop = Object.assign(
  // Top-level PlasmicValueprop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicValueprop
    internalVariantProps: PlasmicValueprop__VariantProps,
    internalArgProps: PlasmicValueprop__ArgProps
  }
);

export default PlasmicValueprop;
/* prettier-ignore-end */
