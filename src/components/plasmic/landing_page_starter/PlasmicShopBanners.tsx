// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bwcSSYqcBXtyPeXvFEu2Rh
// Component: Byj8_PspKHSRUe
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Banner from "../../Banner"; // plasmic-import: XFCbHd8oXlj2iE/component
import Button from "../../Button"; // plasmic-import: j1CvLaKdoY_PwW/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_landing_page_starter.module.css"; // plasmic-import: bwcSSYqcBXtyPeXvFEu2Rh/projectcss
import * as sty from "./PlasmicShopBanners.module.css"; // plasmic-import: Byj8_PspKHSRUe/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 3bOHmE97YcNirE/icon

export type PlasmicShopBanners__VariantMembers = {};

export type PlasmicShopBanners__VariantsArgs = {};
type VariantPropType = keyof PlasmicShopBanners__VariantsArgs;
export const PlasmicShopBanners__VariantProps = new Array<VariantPropType>();

export type PlasmicShopBanners__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicShopBanners__ArgsType;
export const PlasmicShopBanners__ArgProps = new Array<ArgPropType>("children");

export type PlasmicShopBanners__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultShopBannersProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicShopBanners__RenderFunc(props: {
  variants: PlasmicShopBanners__VariantsArgs;
  args: PlasmicShopBanners__ArgsType;
  overrides: PlasmicShopBanners__OverridesType;
  dataFetches?: PlasmicShopBanners__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <Banner
              className={classNames("__wab_instance", sty.banner__eQfl2)}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__e4ScA)}
            >
              <Banner
                className={classNames("__wab_instance", sty.banner__tp8Yk)}
              >
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__fmAoh)}
                  role={"img"}
                  src={
                    "https://images.unsplash.com/photo-1463100099107-aa0980c362e6?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2850&q=80" as const
                  }
                />
              </Banner>

              <Banner
                className={classNames("__wab_instance", sty.banner__fTvVx)}
              >
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img___6U5HS)}
                  role={"img"}
                  src={
                    "https://images.unsplash.com/photo-1554568218-0f1715e72254?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1834&q=80" as const
                  }
                />
              </Banner>
            </p.Stack>
          </React.Fragment>
        ),
        value: args.children
      })}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShopBanners__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShopBanners__VariantsArgs;
    args?: PlasmicShopBanners__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicShopBanners__Fetches;
  } & Omit<PlasmicShopBanners__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShopBanners__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicShopBanners__ArgProps,
      internalVariantPropNames: PlasmicShopBanners__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicShopBanners__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShopBanners";
  } else {
    func.displayName = `PlasmicShopBanners.${nodeName}`;
  }
  return func;
}

export const PlasmicShopBanners = Object.assign(
  // Top-level PlasmicShopBanners renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicShopBanners
    internalVariantProps: PlasmicShopBanners__VariantProps,
    internalArgProps: PlasmicShopBanners__ArgProps
  }
);

export default PlasmicShopBanners;
/* prettier-ignore-end */
